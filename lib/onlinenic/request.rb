module Onlinenic
  #Request XML Format
  #
  #  <?xml version="1.0"?>
  #  <request>
  #    <category>CATEGORY</category>          Operation category: "client" | "domain" | "account". The value of CATEGORY must be one of three categories above.
  #    <action>ACTION</action>                Action: the type of designated action. For example, login means for login operation, infoHost means the DNS query.
  #    <params>                               Parametes.
  #      <param name=”PARAM1”>VALUE1</param>  Parameters1
  #      <param name=”PARAM2”>VALUE2</param>  Parameters2
  #      ......                               .......
  #      <param name=”PARAMn”>VALUEn</param>  ParametersN
  #    </params>
  #    <cltrid>CLTRID</cltrid>                Order number which is generated by customer and must be unique.
  #    <chksum>CHKSUM</chksum>                CHKSUM info. Md5 secret key between reseller and ONlineNIC.
  #  </request>

  class Request

    CATEGORIES = {
            :client => "client",
            :domain => "domain"
    }

    ACTIONS = {
            :login  => { :name => "Login", :checksum => { :name => "login" } },
            :logout => { :name => "Logout", :checksum => { :name => "logout" } },
            :create_contact => { :name => "CreateContact", :category => :domain, :checksum => { :name => "crtcontact", :extra => [:name, :org, :email] } },
            :check_contact => { :name => "CheckContact", :category => :domain, :checksum => { :name => "checkcontact", :extra => [:domaintype, :contactid] } },
            :update_contact => { :name => "UpdateContact", :category => :domain, :checksum => { :name => "updatecontact", :extra => [:domaintype, :domain, :contacttype] } },
            :check_domain => { :name => "CheckDomain", :category => :domain, :checksum => { :name => "checkdomain", :extra => [:domaintype, :domain] } },
            :info_domain => { :name => "InfoDomain", :category => :domain, :checksum => { :name => "infodomain", :extra => [:domaintype, :domain] } }
    }

    class << self

      def login(config)
        create_request(config, CATEGORIES[:client], ACTIONS[:login], :clid => config["account"])
      end

      def logout(config)
        create_request(config, CATEGORIES[:client], ACTIONS[:logout])
      end

      ACTIONS.except(:login, :logout).each_pair do |k, v|
        define_method(k) do |config, params|
          create_request(config, CATEGORIES[v[:category]], ACTIONS[k], params)
        end
      end

#      def create_contact(config, params={})
#        create_request(config, CATEGORIES[:domain], ACTIONS[:create_contact], params)
#      end
#
#      def check_contact(config, params={})
#        create_request(config, CATEGORIES[:domain], ACTIONS[:check_contact], params)
#      end
#
#      def update_contact(config, params={})
#        create_request(config, CATEGORIES[:domain], ACTIONS[:update_contact], params)
#      end
#
#      def check_comain(config, params={})
#        create_request(config, CATEGORIES[:domain], ACTIONS[:check_domain], params)
#      end

      private

      def create_request(config, category, action, params={})
        cltrid = create_cltrid
        xml = "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>"
        xml << "<request>"
        xml << "<category>#{category}</category>"
        xml << "<action>#{action[:name]}</action>"
        if params
          xml << "<params>"
          params.each_pair do |k, v|
            xml << "<param name=\"#{k}\">#{v}</param>"
          end
          xml << "</params>"
        end
        xml << "<cltrid>#{cltrid}</cltrid>"
        xml << "<chksum>#{checksum(config, cltrid, action[:checksum], params)}</chksum>"
        xml << "</request>"        
      end

      def create_cltrid
        Digest::MD5.hexdigest(Time.now.to_s + rand.to_s)[0..20]
      end

      def checksum(config, cltrid, action, params)
        suffix = action[:name].dup
        action[:extra].try(:each) do |e|
          suffix << params[e]
        end
        Digest::MD5.hexdigest(config["account"].to_s + Digest::MD5.hexdigest(config["password"]) + cltrid + suffix)
      end

    end

  end
end